// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:example@localhost:5432/codeforstartup" //env("DATABASE_URL")
}

enum UserType {
  ADMIN
  MODERATOR
  AUTHOR
}

enum PostType {
  POST
  PAGE
  LIST
  COMPARE
  POLL
  QUIZ
  WIDGET
  ORGANIZATION
  SLIDE
}

enum TagType {
  TAG
  CATEGORY
}

enum PostFormat {
  STANDARD
  ASIDE
  CHAT
  GALLERY
  LINK
  IMAGE
  QUOTE
  STATUS
  VIDEO
  AUDIO
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String  @db.VarChar(255)
  content String?
  slug    String  @unique @db.VarChar(255)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  parentPostId String?
  pinned       Boolean @default(false)
  userPinned   Boolean @default(false)

  postType   PostType     @default(POST)
  postStatus PostStatus   @default(DRAFT)
  postFormat PostFormat   @default(STANDARD)
  tagOnPost  TagOnPost[]
  postOnUser PostOnUser[]
  comments   Comment[]
  parentOf   ParentPost[] @relation("parentPost")
  parent     ParentPost[] @relation("post")
}

model ParentPost {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentPostId String
  parentPost   Post   @relation("parentPost", fields: [parentPostId], references: [id])

  postId String
  post   Post   @relation("post", fields: [postId], references: [id])

  @@id([parentPostId, postId])
}

enum PostOnUserType {
  LIKE
  FAVORITE
  FOLLOW
  BOOKMARK
  PINNED
}

model PostOnUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  type PostOnUserType @default(LIKE)

  @@id([userId, postId, type])
}

model PostContentType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique @db.VarChar(255)
  slug        String  @unique @db.VarChar(255)
  description String?
}

model PostMetaData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String  @db.VarChar(255)
  content String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  userType UserType @default(AUTHOR)

  username  String? @unique
  bio       String?
  website   String?
  address   String?
  phone     String?
  twitter   String?
  facebook  String?
  github    String?
  youtube   String?
  linkedin  String?
  instagram String?

  accounts Account[]
  sessions Session[]

  post          Post[]
  postMetaData  PostMetaData[]
  postOnUser    PostOnUser[]
  followers     Follower[]      @relation("follower")
  followings    Follower[]      @relation("following")
  comment       Comment[]
  commentOnUser CommentOnUser[]
}

model Follower {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model TagOnPost {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  tagId String
  tag   Tags   @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Tags {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type  TagType @default(TAG)
  image String?

  name        String      @unique @db.VarChar(255)
  slug        String      @unique @db.VarChar(255)
  description String?
  parent      String?     @db.VarChar(255)
  count       Int         @default(0)
  tagOnPost   TagOnPost[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  parentCommentId String?
  pinned          Boolean @default(false)

  commentOnPostId String
  commentOnPost   Post            @relation(fields: [commentOnPostId], references: [id])
  commentOnUser   CommentOnUser[]
}

enum CommentOnUserType {
  LIKE
  FAVORITE
  FOLLOW
  BOOKMARK
  PINNED
}

model CommentOnUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  type CommentOnUserType @default(LIKE)

  @@id([userId, commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
